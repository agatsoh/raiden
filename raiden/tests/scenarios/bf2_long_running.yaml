version: 2

settings:
  gas_price: "fast"
  chain: goerli
  services:
    pfs:
      url: https://pfs-goerli.services-dev.raiden.network
    udc:
      enable: true
      token:
        deposit: true

token:
  address: "0x62083c80353Df771426D209eF578619EE68D5C7A"
  balance_fund: 10_000_000_000_000_000_000

nodes:
  mode: managed
  count: 5
  raiden_version: local
  enable-monitoring: false
  default_options:
    gas-price: fast
    environment-type: development
    default-settle-timeout: 40
    default-reveal-timeout: 20
    proportional-fee:
      - "0x62083c80353Df771426D209eF578619EE68D5C7A"
      - 0
    proportional-imbalance-fee:
      - "0x62083c80353Df771426D209eF578619EE68D5C7A"
      - 0

# This is the bf2 long running scenario. This scenario mimics user behaviour for 
# opening channels, depositing, transferring, waiting keeping the raiden node alive for 
# a long time in the process checking whether all distributed system in raiden network 
# work accurately with a sufficiently dirty state of blockchain for a long time.

scenario:
  serial:
    name: "Long running scenario"
    tasks:
      - parallel:
          name: "Create channels"
          tasks:
            - open_channel: {from: 0, to: 1, total_deposit: 0, expected_http_status: 201}
            - open_channel: {from: 1, to: 2, total_deposit: 0, expected_http_status: 201}
            - open_channel: {from: 2, to: 3, total_deposit: 0, expected_http_status: 201}
      - serial:
          name: "Allow time for nodes to learn about their channels"
          tasks:
            - wait: 30
      - parallel:
          name: "Verify if channels were opened correctly"
          tasks:
            - assert: {from: 0, to: 1, total_deposit: 0, balance: 0,  state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 0, balance: 0,  state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 0, balance: 0,  state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 0, balance: 0,  state: "opened"}
            - assert: {from: 2, to: 3, total_deposit: 0, balance: 0,  state: "opened"}
            - assert: {from: 3, to: 2, total_deposit: 0, balance: 0,  state: "opened"}
      - parallel:
          name: "0 1 2 3 make a deposit of 100 to their channels"
          tasks:
            - deposit: {from: 0, to: 1, total_deposit: 100_000_000_000_000_000}
            - deposit: {from: 1, to: 0, total_deposit: 100_000_000_000_000_000}
            - deposit: {from: 1, to: 2, total_deposit: 100_000_000_000_000_000}
            - deposit: {from: 2, to: 1, total_deposit: 100_000_000_000_000_000}
            - deposit: {from: 2, to: 3, total_deposit: 101_000_000_000_000_000}
            - deposit: {from: 3, to: 2, total_deposit: 101_000_000_000_000_000}
      - parallel:
          name: "Checking if the deposit was successful"
          tasks:
            - assert: {from: 0, to: 1, total_deposit: 100_000_000_000_000_000, balance: 100_000_000_000_000_000, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 100_000_000_000_000_000, balance: 100_000_000_000_000_000, state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 100_000_000_000_000_000, balance: 100_000_000_000_000_000, state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 100_000_000_000_000_000, balance: 100_000_000_000_000_000, state: "opened"}
            - assert: {from: 2, to: 3, total_deposit: 101_000_000_000_000_000, balance: 101_000_000_000_000_000, state: "opened"}
            - assert: {from: 3, to: 2, total_deposit: 101_000_000_000_000_000, balance: 101_000_000_000_000_000, state: "opened"}
      - parallel:
          name: "Deposit to a channel that does not exist"
          tasks:
            # Node tries to deposit to an non-existing channel
            - deposit: {from: 4, to: 3, total_deposit: 20_000_000_000_000_000, expected_http_status: 409}
            # Node tries to deposit less than the total deposit in two of his channels
            - deposit: {from: 1, to: 0, total_deposit: 50_000_000_000_000_000, expected_http_status: 409}
            - deposit: {from: 1, to: 2, total_deposit: 50_000_000_000_000_000, expected_http_status: 409}
            # Opening a channel, but the channel already exists
            - open_channel: {from: 1, to: 0, total_deposit: 100_000_000_000_000_000, expected_http_status: 409}
      - serial:
          name: "Give the nodes time to complete the earlier deposits and channel opening"
          tasks:
            - wait: 10
      - parallel:
          name: "Checking for the channel state to be unchanged"
          tasks:
            - assert: {from: 0, to: 1, total_deposit: 100_000_000_000_000_000, balance: 100_000_000_000_000_000, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 100_000_000_000_000_000, balance: 100_000_000_000_000_000, state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 100_000_000_000_000_000, balance: 100_000_000_000_000_000, state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 100_000_000_000_000_000, balance: 100_000_000_000_000_000, state: "opened"}
            - assert: {from: 2, to: 3, total_deposit: 101_000_000_000_000_000, balance: 101_000_000_000_000_000, state: "opened"}
            - assert: {from: 3, to: 2, total_deposit: 101_000_000_000_000_000, balance: 101_000_000_000_000_000, state: "opened"}
      - serial:
          name: "2 tries different cases"
          tasks:
            - open_channel: {from: 2, to: 4, total_deposit: 0, expected_http_status: 201}
            - wait: 10
            - deposit: {from: 2, to: 4, total_deposit: 100_000_000_000_000_000}
            - wait: 10
            # Try to make a deposit smaller the the amount that was deposited
            - deposit: {from: 2, to: 4, total_deposit: 30_000_000_000_000_000, expected_http_status: 409}
            # Make a deposit bigger than the deposited amount
            - deposit: {from: 2, to: 4, total_deposit: 150_000_000_000_000_000}
            - wait: 10
      - parallel:
          name: "Verify the channels"
          tasks:
            - assert: {from: 0, to: 1, total_deposit: 100_000_000_000_000_000, balance: 100_000_000_000_000_000, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 100_000_000_000_000_000, balance: 100_000_000_000_000_000, state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 100_000_000_000_000_000, balance: 100_000_000_000_000_000, state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 100_000_000_000_000_000, balance: 100_000_000_000_000_000, state: "opened"}
            - assert: {from: 2, to: 3, total_deposit: 101_000_000_000_000_000, balance: 101_000_000_000_000_000, state: "opened"}
            - assert: {from: 3, to: 2, total_deposit: 101_000_000_000_000_000, balance: 101_000_000_000_000_000, state: "opened"}
            # New channel
            - assert: {from: 2, to: 4, total_deposit: 150_000_000_000_000_000, balance: 150_000_000_000_000_000, state: "opened"}
            - assert: {from: 4, to: 2, total_deposit: 0, balance: 0, state: "opened"}
      - serial:
          name: "Continue building the network"
          tasks:
            # 0 opens a channel with 4
            - open_channel: {from: 0, to: 4, total_deposit: 10_000_000_000_000_000, expected_http_status: 201}
            - assert: {from: 0, to: 4, total_deposit: 10_000_000_000_000_000, balance: 10_000_000_000_000_000, state: "opened"}
            # 4 deposits 25 tokens onto the 0 - 4 channel
            - deposit: {from: 4, to: 0, total_deposit: 25_000_000_000_000_000}
            - wait: 20
            # 0 performs a payment to 4 of 50 tokens (path 0<->1<->2<->4)
            - transfer: {from: 0, to: 4, amount: 50_000_000_000_000_000, expected_http_status: 200, lock_timeout: 30}
            - wait: 5
            - assert: {from: 0, to: 1, total_deposit: 100_000_000_000_000_000, balance: 50_000_000_000_000_000, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 100_000_000_000_000_000, balance: 150_000_000_000_000_000, state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 100_000_000_000_000_000, balance: 50_000_000_000_000_000, state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 100_000_000_000_000_000, balance: 150_000_000_000_000_000, state: "opened"}
            - assert: {from: 2, to: 4, total_deposit: 150_000_000_000_000_000, balance: 100_000_000_000_000_000, state: "opened"}
            - assert: {from: 4, to: 2, total_deposit: 0, balance: 50_000_000_000_000_000, state: "opened"}
            # 2 sends all of its tokens to 1 (one transfer)
            - transfer: {from: 2, to: 1, amount: 150_000_000_000_000_000, expected_http_status: 200, lock_timeout: 30}
            - wait: 5
            - assert: {from: 2, to: 1, total_deposit: 100_000_000_000_000_000, balance: 0, state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 100_000_000_000_000_000, balance: 200_000_000_000_000_000, state: "opened"}
            # 2 tries to send another > 25 tokens payment to 1 (fail no route with enough capacity)
            - transfer: {from: 2, to: 1, amount: 150_000_000_000_000_000, expected_http_status: 409, lock_timeout: 30}
            - wait: 5
      - serial:
          name: "Multiple multi hop payments"
          repeat: 10
          tasks:
            # 2 sends 10 payments of 1 token to 1 by using the 2 <-> 4 <-> 0 <-> 1 route
            - transfer: {from: 2, to: 1, amount: 1_000_000_000_000_000, lock_timeout: 30}
            - wait: 5
      - serial:
          name: "Allow nodes to process the payments"
          tasks:
            - wait: 3
      - parallel:
          name: "Sanity check"
          tasks:
            - assert: {from: 0, to: 1, total_deposit: 100_000_000_000_000_000, balance: 40_000_000_000_000_000, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 100_000_000_000_000_000, balance: 160_000_000_000_000_000, state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 100_000_000_000_000_000, balance: 200_000_000_000_000_000, state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 100_000_000_000_000_000, balance: 0, state: "opened"}
            - assert: {from: 2, to: 4, total_deposit: 150_000_000_000_000_000, balance: 90_000_000_000_000_000, state: "opened"}
            - assert: {from: 4, to: 2, total_deposit: 0, balance: 60_000_000_000_000_000, state: "opened"}
            - assert: {from: 4, to: 0, total_deposit: 25_000_000_000_000_000, balance: 15_000_000_000_000_000, state: "opened"}
            - assert: {from: 0, to: 4, total_deposit: 10_000_000_000_000_000, balance: 20_000_000_000_000_000, state: "opened"}
            - assert: {from: 2, to: 3, total_deposit: 101_000_000_000_000_000, balance: 101_000_000_000_000_000, state: "opened"}
            - assert: {from: 3, to: 2, total_deposit: 101_000_000_000_000_000, balance: 101_000_000_000_000_000, state: "opened"}
      - serial:
          name:
          tasks:
            # stop node B
            - stop_node: 1
            # give it time to shutdown
            - wait: 10
      - serial:
          name: "Multi hop payment 2"
          tasks:
            # 0 sends 10 tokens to 2 (using the 0 <-> 4 <-> 2 route)
            - transfer: {from: 0, to: 2, amount: 10_000_000_000_000_000, lock_timeout: 30}
            - wait: 5
      - parallel:
          name: "Assert transfer was executed correctly"
          tasks:
            - assert: {from: 2, to: 1, total_deposit: 100_000_000_000_000_000, balance: 0, state: "opened"}
            - assert: {from: 0, to: 1, total_deposit: 100_000_000_000_000_000, balance: 40_000_000_000_000_000, state: "opened"}
            - assert: {from: 4, to: 0, total_deposit: 25_000_000_000_000_000, balance: 25_000_000_000_000_000, state: "opened"}
            - assert: {from: 0, to: 4, total_deposit: 10_000_000_000_000_000, balance: 10_000_000_000_000_000, state: "opened"}
            - assert: {from: 2, to: 4, total_deposit: 150_000_000_000_000_000, balance: 100_000_000_000_000_000, state: "opened"}
            - assert: {from: 4, to: 2, total_deposit: 0, balance: 50_000_000_000_000_000, state: "opened"}
            - assert: {from: 0, to: 1, total_deposit: 100_000_000_000_000_000, balance: 40_000_000_000_000_000, state: "opened"}
      - parallel:
          name: "Check edge cases again"
          tasks:
            # try to open a channel with an offline node, but the channel already exists
            - open_channel: {from: 0, to: 1, total_deposit: 200_000_000_000_000_000, expected_http_status: 409}
            # Try to make a payment to an offline node
            - transfer: {from: 0, to: 1, amount: 1_000_000_000_000_000, expected_http_status: 409, lock_timeout: 30}
      - serial:
          name: "Restarting node 1"
          tasks:
            - start_node: 1
      - parallel:
          name: "Checking for the 3 <-> 2 channel state"
          tasks:
            - assert: {from: 2, to: 3, total_deposit: 101_000_000_000_000_000, balance: 101_000_000_000_000_000, state: "opened"}
            - assert: {from: 3, to: 2, total_deposit: 101_000_000_000_000_000, balance: 101_000_000_000_000_000, state: "opened"}
            - assert: {from: 0, to: 1, total_deposit: 100_000_000_000_000_000, balance: 40_000_000_000_000_000, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 100_000_000_000_000_000, balance: 160_000_000_000_000_000, state: "opened"}
      - transfer: {from: 3, to: 2, amount: 99_000_000_000_000_000, lock_timeout: 30}
      - wait: 5
      - serial:
          name: "Checking if payments were made successful"
          tasks:
            - assert: {from: 2, to: 3, total_deposit: 101_000_000_000_000_000, balance: 200_000_000_000_000_000, state: "opened"}
            - assert: {from: 3, to: 2, total_deposit: 101_000_000_000_000_000, balance: 2_000_000_000_000_000, state: "opened"}
            # Also A makes a deposit to A <-> B channel
            - deposit: {from: 0, to: 1, total_deposit: 260_000_000_000_000_000}
            - wait: 10
      - parallel:
          name: "Also check if 0 -> 1 -> 2 -> 3 path has enough capacity for 200 payments of 1 token"
          tasks:
            - assert: {from: 2, to: 3, total_deposit: 101_000_000_000_000_000, balance: 200_000_000_000_000_000, state: "opened"}
            - assert: {from: 3, to: 2, total_deposit: 101_000_000_000_000_000, balance: 2_000_000_000_000_000, state: "opened"}
            - assert: {from: 0, to: 1, total_deposit: 260_000_000_000_000_000, balance: 200_000_000_000_000_000, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 100_000_000_000_000_000, balance: 160_000_000_000_000_000, state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 100_000_000_000_000_000, balance: 200_000_000_000_000_000, state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 100_000_000_000_000_000, balance: 0, state: "opened"}
      - serial:
          name: "Closing down channel 4 <-> 2"
          tasks:
            - close_channel: {from: 4, to: 2}
            - wait: 20
            - assert: {from: 2, to: 4, total_deposit: 150_000_000_000_000_000, balance: 100_000_000_000_000_000, state: "closed"}
            - assert: {from: 4, to: 2, total_deposit: 0, balance: 50_000_000_000_000_000, state: "closed"}
      - transfer: {from: 0, to: 3, amount: 200_000_000_000_000_000, lock_timeout: 30}
      - wait: 5
      - serial:
          name: "Let the node get into a stable state"
          tasks:
            - wait: 60
      - parallel:
          name: "Assert channels after transfers"
          tasks:
            - assert: {from: 2, to: 3, total_deposit: 101_000_000_000_000_000, balance: 0, state: "opened"}
            - assert: {from: 3, to: 2, total_deposit: 101_000_000_000_000_000, balance: 202_000_000_000_000_000, state: "opened"}
            - assert: {from: 0, to: 1, total_deposit: 260_000_000_000_000_000, balance: 0, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 100_000_000_000_000_000, balance: 360_000_000_000_000_000, state: "opened"}
            - assert: {from: 1, to: 2, total_deposit: 100_000_000_000_000_000, balance: 0, state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 100_000_000_000_000_000, balance: 200_000_000_000_000_000, state: "opened"}
      - serial:
          name: "Starting closing edge cases"
          tasks:
            # 2 tries to make a deposit to the channel that is being closed (fail 409)
            - deposit: {from: 2, to: 4, total_deposit: 200_000_000_000_000_000, expected_http_status: 409}
            # 2 sends 10 tokens to 1
            - transfer: {from: 2, to: 1, amount: 10_000_000_000_000_000, lock_timeout: 30}
            - wait: 5
            - assert: {from: 1, to: 2, total_deposit: 100_000_000_000_000_000, balance: 10_000_000_000_000_000, state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 100_000_000_000_000_000, balance: 189_000_000_000_000_000, state: "opened"}
            # 1 sends 10 tokens to 0
            - transfer: {from: 1, to: 0, amount: 10_000_000_000_000_000, lock_timeout: 30}
            - wait: 5
            - assert: {from: 0, to: 1, total_deposit: 260_000_000_000_000_000, balance: 10_000_000_000_000_000, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 100_000_000_000_000_000, balance: 299_000_000_000_000_000, state: "opened"}
            # 4 sends 10 tokens to 2 (0 -> 1-> 2)
            - transfer: {from: 4, to: 2, amount: 10_000_000_000_000_000, lock_timeout: 30}
            - wait: 5
      - parallel:
          name: "Assert for the channel states after mediated transfers were completed"
          tasks:
            - assert: {from: 1, to: 2, total_deposit: 100_000_000_000_000_000, balance: 0, state: "opened"}
            - assert: {from: 2, to: 1, total_deposit: 100_000_000_000_000_000, balance: 200_000_000_000_000_000, state: "opened"}
            - assert: {from: 0, to: 1, total_deposit: 260_000_000_000_000_000, balance: 0, state: "opened"}
            - assert: {from: 1, to: 0, total_deposit: 100_000_000_000_000_000, balance: 309_000_000_000_000_000, state: "opened"}
            - assert: {from: 4, to: 0, total_deposit: 25_000_000_000_000_000, balance: 15_000_000_000_000_000, state: "opened"}
            - assert: {from: 0, to: 4, total_deposit: 10_000_000_000_000_000, balance: 20_000_000_000_000_000, state: "opened"}
      - serial:
          name: "4 Closes his channel with 0"
          tasks:
            - close_channel: {from: 4, to: 0}
            - wait: 5
      - parallel:
          name: "Check if channel was closed"
          tasks:
            - assert: {from: 4, to: 0, total_deposit: 25_000_000_000_000_000, balance: 15_000_000_000_000_000, state: "closed"}
            - assert: {from: 0, to: 4, total_deposit: 10_000_000_000_000_000, balance: 20_000_000_000_000_000, state: "closed"}
      - parallel:
          name: "All nodes try to make a payment to 4"
          tasks:
            - transfer: {from: 0, to: 4, amount: 1_000_000_000_000_000, expected_http_status: 409, lock_timeout: 30}
            - transfer: {from: 1, to: 4, amount: 1_000_000_000_000_000, expected_http_status: 409, lock_timeout: 30}
            - transfer: {from: 2, to: 4, amount: 1_000_000_000_000_000, expected_http_status: 409, lock_timeout: 30}
            - transfer: {from: 3, to: 4, amount: 1_000_000_000_000_000, expected_http_status: 409, lock_timeout: 30}
      - serial:
          name: "0 and 1 leave token netwwork"
          tasks:
            - leave_network: {from: 0}
            - leave_network: {from: 1}
            - wait: 20
      - serial:
          name: "Check if the only channel open is 2 <-> 3"
          tasks:
            - assert: {from: 2, to: 3, total_deposit: 100_000_000_000_000_000, balance: 0, state: "opened"}
            - assert: {from: 3, to: 2, total_deposit: 100_000_000_000_000_000, balance: 200_000_000_000_000_000, state: "opened"}
      - serial:
          name: "2 closes the channel with 3"
          tasks:
            - close_channel: {from: 2, to: 3}
            - wait: 10
      - parallel:
          name: "Check final state of the channels"
          tasks:
            - assert: {from: 2, to: 3, total_deposit: 100_000_000_000_000_000, balance: 0, state: "closed"}
            - assert: {from: 3, to: 2, total_deposit: 100_000_000_000_000_000, balance: 200_000_000_000_000_000, state: "closed"}
            - assert: {from: 1, to: 2, total_deposit: 100_000_000_000_000_000, balance: 0, state: "closed"}
            - assert: {from: 2, to: 1, total_deposit: 100_000_000_000_000_000, balance: 200_000_000_000_000_000, state: "closed"}
            - assert: {from: 0, to: 1, total_deposit: 260_000_000_000_000_000, balance: 0, state: "closed"}
            - assert: {from: 1, to: 0, total_deposit: 100_000_000_000_000_000, balance: 360_000_000_000_000_000, state: "closed"}
            - assert: {from: 4, to: 0, total_deposit: 25_000_000_000_000_000, balance: 15_000_000_000_000_000, state: "closed"}
            - assert: {from: 0, to: 4, total_deposit: 10_000_000_000_000_000, balance: 20_000_000_000_000_000, state: "closed"}
            - assert: {from: 2, to: 4, total_deposit: 150_000_000_000_000_000, balance: 100_000_000_000_000_000, state: "closed"}
            - assert: {from: 4, to: 2, total_deposit: 0, balance: 50_000_000_000_000_000, state: "closed"}
